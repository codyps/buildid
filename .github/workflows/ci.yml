name: ci
on:
  push:
    branches-ignore:
      - '**.tmp'
jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust_version: [beta]
    env:
      BUILD_ID_LEN: 20
      RUST_LOG: trace
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - run: cargo install cargo-hack

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: --feature-powerset clippy -- -D warnings

      - name: Build
        # NOTE: we don't feature-powerset here because we need to provide
        # symbols for some of the specific lookup mechanisms
        # NOTE: we don't build the entire workspace because
        # buildid-linker-symbols does not work on all platforms (for example,
        # it fails on macos)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets

      - name: Test (GNU extras)
        uses: actions-rs/cargo@v1
        if: ${{ matrix.os }} == ubuntu-latest
        with:
          command: test
          args: -p buildid-tests-linker-symbols

  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  test-specific:
    env:
      RUST_LOG: trace
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust_version: [beta]
        script: [test-gnu-ld, test-gnu-ld-section-inject, test-gnu-ld-symbol-start-end, test-gnu-ld-symbol-start-end-no-lds]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          profile: minimal

      - uses: Swatinem/rust-cache@v2

      - run: ./scripts/${{ matrix.script }}
